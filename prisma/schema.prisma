generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts          Account[]
  expenses          Expense[]
  incomes           Income[]
  categories        Category[]
  budgets           Budget[]
  groupMembers      GroupMember[]
  groupExpenses     GroupExpense[]
  expenseSplits     ExpenseSplit[]
  groupLenders      GroupLender[]
  payments          Payment[]
  comments          Comment[]
  recurringExpenses RecurringExpense[]
  notifications     Notification[]
  budgetNotifications BudgetNotification[]

  @@map("users")
}

model Account {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    AccountType
  balance Float       @default(0)
  color   String?
  userId  String      @db.ObjectId

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses          Expense[]
  incomes           Income[]
  transfersFrom     Transfer[]         @relation("TransferFrom")
  transfersTo       Transfer[]         @relation("TransferTo")
  recurringExpenses RecurringExpense[]
  groupExpenses     GroupExpense[]
  groupLenders      GroupLender[]
  settlementSplits  ExpenseSplit[]

  @@map("accounts")
}

model Category {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  type  CategoryType
  color String?
  icon  String?
  userId String      @db.ObjectId

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses          Expense[]
  incomes           Income[]
  budgets           Budget[]
  recurringExpenses RecurringExpense[]

  @@map("categories")
}

model Expense {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  amount              Float
  description         String?
  date                DateTime  @default(now())
  receiptUrl          String?
  isRecurring         Boolean   @default(false)
  recurringExpenseId  String?   @db.ObjectId
  groupExpenseId      String?   @db.ObjectId
  groupType           GroupTransactionType?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              String    @db.ObjectId
  accountId           String    @db.ObjectId
  categoryId          String    @db.ObjectId

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  account           Account           @relation(fields: [accountId], references: [id])
  category          Category          @relation(fields: [categoryId], references: [id])
  recurringExpense  RecurringExpense? @relation(fields: [recurringExpenseId], references: [id])
  groupExpense      GroupExpense?     @relation(fields: [groupExpenseId], references: [id])

  @@map("expenses")
}

model Income {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  description    String?
  date           DateTime @default(now())
  source         String?
  groupExpenseId String?  @db.ObjectId
  groupType      GroupTransactionType?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @db.ObjectId
  accountId      String   @db.ObjectId
  categoryId     String   @db.ObjectId

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      Account       @relation(fields: [accountId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  groupExpense GroupExpense? @relation(fields: [groupExpenseId], references: [id])

  @@map("incomes")
}

model Budget {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  spent      Float    @default(0)
  period     BudgetPeriod
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  categoryId String   @db.ObjectId

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  budgetNotifications BudgetNotification[]

  @@map("budgets")
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members   GroupMember[]
  expenses  GroupExpense[]

  @@map("groups")
}

model GroupMember {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  role    GroupRole @default(MEMBER)
  userId  String    @db.ObjectId
  groupId String    @db.ObjectId

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model GroupExpense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String?
  date        DateTime @default(now())
  receiptUrl  String?
  splitType   String   @default("EQUAL")
  accountId   String?  @db.ObjectId
  paidById    String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  groupId     String   @db.ObjectId

  account         Account?       @relation(fields: [accountId], references: [id])
  paidBy          User?          @relation(fields: [paidById], references: [id])
  group           Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  splits          ExpenseSplit[]
  lenders         GroupLender[]
  payments        Payment[]
  comments        Comment[]
  personalExpenses Expense[]
  personalIncomes  Income[]

  @@map("group_expenses")
}

model GroupLender {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  userId    String @db.ObjectId
  expenseId String @db.ObjectId
  accountId String? @db.ObjectId

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      Account?     @relation(fields: [accountId], references: [id])
  groupExpense GroupExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([userId, expenseId])
  @@map("group_lenders")
}

model ExpenseSplit {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  userId           String    @db.ObjectId
  expenseId        String    @db.ObjectId
  settled          Boolean   @default(false)
  settledAt        DateTime?
  settlementAccountId String? @db.ObjectId

  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupExpense       GroupExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  settlementAccount  Account?     @relation(fields: [settlementAccountId], references: [id])

  @@unique([userId, expenseId])
  @@map("expense_splits")
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  date      DateTime @default(now())
  fromId    String   @db.ObjectId
  toId      String   @db.ObjectId
  expenseId String?  @db.ObjectId

  from         User          @relation(fields: [fromId], references: [id])
  groupExpense GroupExpense? @relation(fields: [expenseId], references: [id])

  @@map("payments")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  expenseId String   @db.ObjectId

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupExpense GroupExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Transfer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  fromId      String   @db.ObjectId
  toId        String   @db.ObjectId

  from Account @relation("TransferFrom", fields: [fromId], references: [id])
  to   Account @relation("TransferTo", fields: [toId], references: [id])

  @@map("transfers")
}

model RecurringExpense {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  description     String?
  frequency       RecurringFrequency
  startDate       DateTime
  endDate         DateTime?
  nextDueDate     DateTime
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String         @db.ObjectId
  accountId       String         @db.ObjectId
  categoryId      String         @db.ObjectId

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  account         Account        @relation(fields: [accountId], references: [id])
  category        Category       @relation(fields: [categoryId], references: [id])
  expenses        Expense[]

  @@map("recurring_expenses")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  userId    String   @db.ObjectId
  relatedId String?  @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model BudgetNotification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  budgetId  String   @db.ObjectId
  userId    String   @db.ObjectId
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@unique([budgetId, userId])
  @@map("budget_notifications")
}

enum AccountType {
  CASH
  BANK
  CREDIT_CARD
  INVESTMENT
  OTHER
  OTHERS_FIXED      // Fixed "Others" account (cannot be deleted/edited)
  GROUP_LENDING     // For tracking group lending/borrowing
}

enum CategoryType {
  EXPENSE
  INCOME
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum NotificationType {
  GROUP_EXPENSE_ADDED
  GROUP_EXPENSE_SETTLED
  GROUP_PAYMENT_RECEIVED
  BUDGET_ALERT
  BUDGET_WARNING
  GROUP_MEMBER_ADDED
  GROUP_MEMBER_REMOVED
  EXPENSE_REMINDER
  PAYMENT_REMINDER
  ACCOUNT_LOW_BALANCE
}

enum GroupTransactionType {
  LENDER
  BORROWER
  SETTLEMENT_RECEIVED
  SETTLEMENT_PAID
}